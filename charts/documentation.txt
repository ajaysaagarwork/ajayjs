
_Chart Class Documentation
==========================

Overview
--------
The `_Chart` class provides a powerful, flexible, and fully customized wrapper around Chart.js. It allows you to render a variety of chart types (line, bar, pie, radar, etc.) on an HTML <canvas> element with advanced features like theming, custom palettes, dynamic updates, event handling, and export functionality.

Installation & Setup
--------------------
1. Ensure you have an HTML page with a <canvas> tag. For example:
   <canvas id="myChart" width="600" height="350"></canvas>
2. Include `_Chart.js` as a module in your project. For example:
   <script type="module">
     import { _Chart } from './_Chart.js';
   </script>

Constructor
-----------
**Signature:**
```
new _Chart(canvasElement: HTMLCanvasElement, initialConfig?: ChartRenderOptions)
```

**Parameters:**
- `canvasElement` _(required)_: A valid HTMLCanvasElement where the chart will be rendered.
- `initialConfig` _(optional)_: An object specifying initial chart configuration. You can pass the following keys:
  - `type` (string): Chart type (e.g., 'line', 'bar', 'pie', etc.). Default is 'line'.
  - `labels` (string[]): An array of labels for the X-axis or categories.
  - `datasets` (DatasetConfig[]): An array of dataset configuration objects.
  - `titleText` (string): Title text displayed at the top of the chart.
  - `theme` ('dark'|'light'): Choose 'dark' or 'light' theme for default styling. Default is 'dark'.
  - `palette` (string[]): Explicit color palette. If not provided, a default palette is generated based on theme.
  - `options` (object): Chart.js `options` object to merge with default themed options.
  - `onClick` (function): Callback for click events on data elements. Signature: `(evt, elements) => {}`
  - `onHover` (function): Callback for hover events. Signature: `(evt, elements) => {}`

**Example:**
```js
const canvas = document.getElementById('myChart');
const chart = new _Chart(canvas, {
  type: 'bar',
  labels: ['Jan', 'Feb', 'Mar', 'Apr'],
  datasets: [
    { label: 'Revenue', data: [10, 15, 20, 25] }
  ],
  titleText: 'Monthly Revenue',
  theme: 'light',
  palette: ['#e63946', '#457b9d']
});
```

Public Methods
--------------
1. `Render(): void`
   - Builds and renders (or re-renders) the chart using the stored configuration. Waits for Chart.js to load if not already available.
   - **Usage:** After instantiating `_Chart`, call `Render()` to display the chart.
   - **Example:**
     ```js
     chart.Render();
     ```

2. `addDataset(newDs: DatasetConfig): void`
   - Adds a new dataset to the chart and automatically re-renders.
   - `newDs` must be a valid DatasetConfig object.
   - **Example:**
     ```js
     chart.addDataset({
       label: 'Product B',
       data: [12, 18, 24, 30],
       backgroundColor: '#2a9d8f'
     });
     ```

3. `removeDataset(index: number): void`
   - Removes the dataset at the specified index from the configuration and re-renders.
   - **Example:**
     ```js
     chart.removeDataset(1);
     ```

4. `updateData(dsIndex: number, newData: Array<number>|Array<object>): void`
   - Updates the `data` array for the dataset at `dsIndex` and re-renders.
   - **Example:**
     ```js
     chart.updateData(0, [11, 16, 21, 26]);
     ```

5. `updateLabels(newLabels: string[]): void`
   - Replaces the chart's labels with `newLabels` and re-renders.
   - **Example:**
     ```js
     chart.updateLabels(['Q1', 'Q2', 'Q3', 'Q4']);
     ```

6. `toggleTheme(): void`
   - Toggles the chart theme between 'dark' and 'light' and re-renders.
   - **Usage:**
     ```js
     chart.toggleTheme();
     ```

7. `exportAsImage(filename?: string): void`
   - Exports the current chart as a PNG image. Defaults to 'chart.png' if no filename is provided.
   - **Example:**
     ```js
     chart.exportAsImage('myChartSnapshot.png');
     ```

8. `destroy(): void`
   - Destroys the internal Chart.js instance and stops observing for resizes. Useful for cleanup.
   - **Usage:**
     ```js
     chart.destroy();
     ```

DatasetConfig Object
--------------------
Each dataset in `datasets` array should be an object of the form:
```js
{
  label?: string,                // Dataset name shown in the legend
  data?: Array<number>|Array<object>, // Numeric data (e.g., [1,2,3]) or objects for specialized charts
  backgroundColor?: string|string[],  // A single color string or array of colors
  borderColor?: string|string[],      // A single color or array of colors
  borderWidth?: number,           // Width of border lines (default: 2)
  pointRadius?: number,           // Circle radius for line/scatter points (default: 4)
  fill?: boolean,                 // Fill under the line (for line/area charts)
  tension?: number,               // Curve tension (for line/area/radar, default: 0.4)
  additionalProps?: object        // Any other valid Chart.js dataset props (e.g., barThickness, borderRadius)
}
```

Themes & Palettes
-----------------
- **Theme Option**: `'dark'` or `'light'`
  - `'dark'` sets dark backgrounds for grids, dark page background, and light‐colored text/labels.
  - `'light'` sets white backgrounds, light grids, and dark text.

- **Palette**: 
  - If `palette` is provided (array of color strings), those colors are used for each dataset in sequence.
  - If omitted, a default palette of 10 colors is generated, cycling if there are more than 10 datasets.

Merging User Options
--------------------
The `_Chart` class deep‐merges your `options` object with sensible defaults for the chosen theme. For example:
```js
options: {
  scales: {
    x: { grid: { display: false } },
    y: { grid: { color: '#888' } }
  },
  plugins: {
    legend: { position: 'bottom' }
  }
}
```
will override or extend the default grid colors, legend positioning, etc., without needing to specify every configuration detail.

Event Handlers
--------------
- **onClick**: Function called when a data element is clicked:
  - Signature: `(event, elements) => {}` 
  - `elements`: Array of chart elements under the click (e.g., `[ { datasetIndex, index, ... } ]`.

- **onHover**: Function called on hover events:
  - Signature: `(event, elements) => {}` 
  - Use to display custom tooltips or highlight specific elements.

Responsive Behavior
-------------------
- A `ResizeObserver` is attached to the canvas’s parent container (or the canvas itself) to ensure the chart automatically resizes if its container’s size changes.
- If you need a fixed size, you can override with standard CSS (e.g., `.chart-wrapper { width: 400px; height: 300px; }`).

Supported Chart Types
---------------------
- 'line', 'bar', 'scatter', 'pie', 'doughnut', 'area', 'bubble', 'radar', 'polarArea', 'heatmap', 'treemap',  
  'candlestick', 'gauge', 'funnel', 'boxplot', 'histogram'

Examples
--------
1. **Line Chart Example**
   ```js
   const canvas = document.getElementById('lineChart');
   const lineChart = new _Chart(canvas, {
     type: 'line',
     labels: ['Jan', 'Feb', 'Mar', 'Apr'],
     datasets: [
       {
         label: 'Temperature',
         data: [5, 10, 15, 12],
         backgroundColor: 'rgba(255,165,0,0.3)',
         borderColor: 'orange',
         fill: true,
         tension: 0.2
       }
     ],
     titleText: 'Monthly Temperature',
     theme: 'light'
   });
   lineChart.Render();
   ```

2. **Pie Chart Example**
   ```js
   const canvasPie = document.getElementById('pieChart');
   const pieChart = new _Chart(canvasPie, {
     type: 'pie',
     labels: ['Red', 'Blue', 'Yellow'],
     datasets: [
       {
         data: [12, 19, 7],
         backgroundColor: [
           'rgba(255, 99, 132, 0.7)',
           'rgba(54, 162, 235, 0.7)',
           'rgba(255, 206, 86, 0.7)'
         ],
         borderColor: '#222',
         borderWidth: 1
       }
     ],
     titleText: 'Color Distribution'
   });
   pieChart.Render();
   ```

Notes
-----
- Always call `Render()` after changing any configuration or datasets.
- Call `destroy()` when you no longer need the chart or before removing the canvas from the DOM.
- To update only data or labels, use `updateData(...)` or `updateLabels(...)` for efficiency.

